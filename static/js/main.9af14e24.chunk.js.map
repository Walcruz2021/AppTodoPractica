{"version":3,"sources":["components/PanelInf.js","components/Abaut.jsx","components/TaskRow.js","components/PanelSup.js","components/VisibilityControl.js","App.js","serviceWorker.js","index.js"],"names":["PanelInf","props","className","userName","taskItems","filter","t","done","length","Abaut","class","style","padding","href","target","text-align","TaskRow","key","task","name","desc","fec","type","checked","onChange","toggleTask","PanelSup","useState","newTaskName","setNewTaskName","console","log","updateNewTaskValue","e","value","placeholder","margin","onClick","callback","VisibilityControl","isChecked","htmlFor","description","App","setUserName","fecha","setTaskItems","showCompleted","setshowCompleted","useEffect","data","localStorage","getItem","JSON","parse","setItem","stringify","map","taskTableRows","doneValue","taskName","find","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9af14e24.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const PanelInf = props => (\n <>\n <h4 className=\"bg-success text-white text-center p-4\">\n    TAREAS DE: {props.userName} \n  </h4>\n   <h5 className=\"bg-primary text-white text-center p-4\">\n   Cantidad de tareas:  {props.taskItems.filter(t => !t.done).length}{\" \"}\n   \n </h5>\n</>\n);\n","import React from \"react\";\r\nimport Ab from \"./Abaut.css\";\r\n\r\nexport const Abaut = (props) => (\r\n  <div class=\"formato\">\r\n    <div class=\"bg-dark text-white\" style={{ padding: \"10px\" }}>\r\n      {/* <p class=\"text-center\">\r\n        <i class=\"fas fa-user-graduate\"></i> Walter Cruz\r\n      </p> */}\r\n\r\n      <p class=\"text-center\">\r\n        <i class=\"fab fa-linkedin\"></i>\r\n        <a\r\n          href=\"https://www.linkedin.com/in/waltercruz1988/\"\r\n          target=\"blank\"\r\n          class=\"linkedin\"\r\n        >\r\n           Linkedin\r\n        </a>\r\n      </p>\r\n      <p class=\"text-center\">\r\n        <i class=\"fas fa-envelope-open-text\" text-align=\"center\"></i>{\" \"}\r\n        <a\r\n          href=\"mailto:walcruz1988.21@gmail.com\"\r\n          target=\"blank\"\r\n          class=\"twitter\"\r\n        >\r\n           walcruz1988.21@gmail.com\r\n        </a>\r\n      </p>\r\n      {/* <p class=\"text-center\">\r\n        <i class=\"fas fa-map-marker-alt\"></i> Salta Capital-Argentina\r\n      </p> */}\r\n    </div>\r\n  </div>\r\n);\r\n","import React from \"react\";\n\nexport const TaskRow = props => (\n\n  <tr key={props.task.name}>\n    <td>{props.task.name}</td>\n    <td>{props.task.desc}</td>\n    <td>{props.task.fec}</td>\n    <td>\n      <input\n        type=\"checkbox\"\n        checked={props.task.done}\n        onChange={() => props.toggleTask(props.task)}\n      />\n    </td>\n    {/* <td>{props.task.fecha}</td> */}\n  </tr>\n);\n","import React, { useState } from \"react\";\n\nexport const PanelSup = props => {\n\n  // const [newTaskName, setNewTaskName] = useState(\"\");\n  const [newTaskName, setNewTaskName] = useState({ name: \"\", desc: \"\", fec: \"\" });\n  //const [newTaskName, setNewTaskName] = useState({name:\"\",fec:\"\"});\n  console.log(newTaskName, \"taskcreator\")\n\n  // const updateNewTaskValue = e => setNewTaskName(e.target.value);\n  const updateNewTaskValue = e => setNewTaskName({ ...newTaskName, [e.target.name]: e.target.value });\n\n  const createNewTask = () => {\n    props.callback(newTaskName);\n    console.log(newTaskName)\n    // setNewTaskName('');\n    setNewTaskName({ name: \"\", desc: \"\", fec: \"\" });\n    //setNewTaskName({name:\"\",fec:\"\"});\n  }\n\n  return (\n    <>\n      <div class=\"bg-secondary mx-auto mt-2\" style={{ padding: \"10px\" }}>\n        <h4 class=\"bg-warning text-center p-3\">Agregar Tarea</h4>\n        {/* //<form class=\"form-group row\"> */}\n        <form class=\"container-sm mt-2 text-white\">\n          <div class=\"form-group row\">\n            <label class=\"col-sm-2 col-form-label\">Agregar Tarea:</label>\n            {/* <div class=\"text-center text-white p-2\">AGREGAR TAREA</div> */}\n            {/* <input\n          type=\"text\"\n          className=\"form-control w-50 mx-auto\"\n          placeholder=\"Agregar ToDo\"\n          value={newTaskName}\n          onChange={updateNewTaskValue}\n        /> */}\n            <div class=\"col-sm-10\">\n              <input\n                type=\"text\"\n                name=\"name\"\n                //className=\"form-control w-50 mx-auto\"\n                className=\"form-control-plaintext text-white\"\n                placeholder=\"Agregar ToDo\"\n                value={newTaskName.name}\n                onChange={updateNewTaskValue}\n              />\n            </div>\n          </div>\n          <div class=\"form-group row\">\n            <label class=\"col-sm-2 col-form-label\">Detalles:</label>\n            <div class=\"col-sm-10\">\n              <input\n                type=\"text\"\n                name=\"desc\"\n                //name=\"fec\"\n                className=\"form-control-plaintext text-white\"\n                placeholder=\"Agregar ToDo\"\n                //value={newTaskName.desc}\n                value={newTaskName.desc}\n                onChange={updateNewTaskValue}\n              />\n            </div>\n          </div>\n          <div class=\"form-group row\">\n            <label class=\"col-sm-2 col-form-label\">Fecha:</label>\n            <div class=\"col-sm-10\">\n              <input\n                type=\"date\"\n                name=\"fec\"\n                //name=\"fec\"\n                className=\"form-control-plaintext text-white\"\n                placeholder=\"Agregar ToDo\"\n                //value={newTaskName.desc}\n                value={newTaskName.fec}\n                onChange={updateNewTaskValue}\n              />\n            </div>\n          </div>\n        </form>\n        <button className=\"btn btn-outline-success btn-lg btn-block w-50 w-50 mx-auto \" style={{ margin: \"15px\" }} onClick={createNewTask}>\n          Agregar Tarea\n        </button>\n\n      </div>\n    </>\n  );\n};\n","import React from \"react\";\n\nexport const VisibilityControl = props => {\n  return (\n    <div className=\"form-check\">\n      <input\n        type=\"checkbox\"\n        className=\"form-check-input\"\n        checked={props.isChecked}\n        onChange={ e => props.callback(e.target.checked)}\n      />\n      <label htmlFor=\"form-check-label\">\n        Listado de { props.description }\n      </label>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport { PanelInf } from \"./components/PanelInf\";\nimport { Abaut } from \"./components/Abaut\"\nimport { TaskRow } from \"./components/TaskRow\";\nimport { PanelSup } from \"./components/PanelSup\";\nimport { VisibilityControl } from \"./components/VisibilityControl\";\n\nfunction App() {\n  const [userName, setUserName] = useState(\"Admin\");\n  const [taskItems, setTaskItems] = useState([\n    { name: \"Salir a correr\", done: false,fecha:\"2021-11-19\" },\n    { name: \"Pagar la luz\", done: false,fecha:\"2021-11-19\" },\n    { name: \"Cobrar el sueldo\", done: true,fecha:\"2021-11-19\" },\n    { name: \"Ir al gym\", done: false,fecha:\"2021-11-19\" }\n  ]);\n  const [showCompleted, setshowCompleted] = useState(true);\n\n  useEffect(() => {\n    let data = localStorage.getItem(\"tasks\");\n    if (data != null) {\n      setTaskItems(JSON.parse(data))\n    } else {\n      setUserName(\"Admin\");\n      setTaskItems([\n        { name: \"Salir a correr\", done: false,fecha:\"2021-11-19\" },\n        { name: \"Pagar la luz\", done: false,fecha:\"2021-11-19\" },\n        { name: \"Cobrar el sueldo\", done: true,fecha:\"2021-11-19\" },\n        { name: \"Ir al gym\", done: false ,fecha:\"2021-11-19\"}\n      ]);\n      setshowCompleted(true);\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(\"tasks\", JSON.stringify(taskItems));\n  }, [taskItems]);\n\n  const createNewTask = taskName => {\n    // if (!taskItems.find(t => t.name === taskName)) {\n    //   setTaskItems([...taskItems, { name: taskName, done: false }]);\n    // }\n    if (!taskItems.find(t => t.name === taskName.name)) {\n      setTaskItems([...taskItems, { name: taskName.name, done: false,desc:taskName.desc,fec:taskName.fec}]);\n      //setTaskItems([...taskItems, { name: taskName.name, done: false,fec:taskName.fec}]);\n    }\n  };\n\n  const toggleTask = task =>\n    setTaskItems(\n      taskItems.map(t => (t.name === task.name ? { ...t, done: !t.done } : t))\n    );\n\n  const taskTableRows = doneValue =>\n    taskItems\n      .filter(task => task.done === doneValue)\n      .map(task => (\n        <TaskRow key={task.name} task={task} toggleTask={toggleTask} />\n      ));\n\n  return (\n    <>\n  <div style={{ padding: \"10px\" }}><Abaut /></div>\n      <div>\n        {/* <h1 class=\"mx-auto\" style={{width: \"5rem\"}}>APP</h1> */}\n\n        <div className=\"container-lg\">\n\n          <PanelSup callback={createNewTask} />\n          <table className=\"table table-bordered table-hover table-dark\">\n            <thead class=\"thead-light\">\n              <tr>\n                <th>Descripcion de Tareas</th>\n                <th>Detalles</th>\n                <th>Fecha</th>\n                <th>Tarea Realizada</th>\n              </tr>\n            </thead>\n            <tbody>{taskTableRows(false)}</tbody>\n          </table>\n          <div className=\"bg-secondary text-white text-center p-2\">\n            <VisibilityControl\n              description=\"Tareas Realizadasº \"\n              isChecked={showCompleted}\n              callback={checked => setshowCompleted(checked)}\n            />\n          </div>\n          {showCompleted && (\n            <table className=\"table table-bordered table-hover \">\n              <thead>\n                <tr>\n                  <th>Descripcion de Tareas</th>\n                  <th>Detalles</th>\n                  <th>Fecha</th>\n                  <th>Tarea Realizada</th>\n                </tr>\n              </thead>\n              <tbody>{taskTableRows(true)}</tbody>\n            </table>\n          )}\n          <PanelInf userName={userName} taskItems={taskItems} />\n        </div>\n      </div>\n      <div style={{ padding: \"10px\" }}><Abaut /></div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}